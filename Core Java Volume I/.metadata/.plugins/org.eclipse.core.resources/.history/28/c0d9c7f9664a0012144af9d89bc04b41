package compexample;

import java.awt.Color;
import java.util.Comparator;

public class PeopleComparator implements Comparator{
	
    private String sortOrder;
    private int sortColumn;
    
    public PeopleComparator(int sortColumn, String sortOrder){
    	
	    //Your Job (*hint* you probabaly want to store the two arguments)
	    //The first argument takes a column that matches up with the
	    //constants Person.COL_LASTNAME, Person.COL_FIRSTNAME, 
	    //Person.COL_PHONE, Person.COL_EMAIL, and Person.COL_COLOR
	    //The second matches ComparatorExample.ASCENDING and 
	    //ComparatorExample.DESCENDING (two string constants).
    	
    	this.sortColumn = sortColumn;
    	this.sortOrder = sortOrder;
	}
    
	public int compare(Object o1,Object o2){
		
	    //Your Job (you must cast o1 and o2 to Person, but
	    //make sure to check that they are indeed instanceof Person)
	    //This MUST follow the Comparator interface.
	    //To compare the colors, try using getColor() in
	    //class Person. To compare the other fields, note
	    //that many things are already comparable, using
	    //someObj1.compareTo(someObj2)
		
		int iReturn = 0;
		
		if ((o1 instanceof Person) & (o2 instanceof Person)) {
			
			Person oP1 = (Person) o1;
			Person oP2 = (Person) o2;
			
			String sp1;
			String sp2;
			
			if (sortColumn != 4) {
				sp1 = (String) oP1.getField(sortColumn);
				sp2 = (String) oP2.getField(sortColumn);
			}
			else {
				int ioP1color = oP1.getColor().getRGB();
				int ioP2color = oP2.getColor().getRGB();			
				sp1 = Integer.toString(ioP1color);
				sp2 = Integer.toString(ioP2color);
			}
			
			if (sortOrder.equals("ascending")) {
				iReturn = sp1.compareTo(sp2);
			}
			else {
				iReturn = sp2.compareTo(sp1);
			}
		}
		
		return iReturn;

	}

}
